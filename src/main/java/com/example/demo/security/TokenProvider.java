package com.example.demo.security;

import java.nio.charset.Charset;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;

import org.springframework.stereotype.Service;

import com.example.demo.model.UserEntity;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
//사용자 정보를 받아 JWT를 생성하는 클래스
public class TokenProvider {
	private static final String SECRET_KEY = "NMA8JPctFuna59f5";
	
	// JWT 토큰을 생성하는 메소드
	public String create(UserEntity userEntity) {
		// 기한은 지금부터 1일로 설정
		Date expiryDate = Date.from(
			Instant.now().plus(1, ChronoUnit.DAYS));

		//JWT Token 생성
		return Jwts.builder()
			//header에 들어갈 내용 및 서명을 하기 위한 SECRET_KEY
			.signWith(SignatureAlgorithm.HS512, SECRET_KEY)
			//payload에 들어갈 내용
			.setSubject(userEntity.getId())
			.setIssuer("demo app")
			.setIssuedAt(new Date())
			.setExpiration(expiryDate)
			.compact();
	}
	
	// 토큰을 디코딩 및 파싱하고 토큰의 위조 여부 확인
	public String validateAndGetUserId(String token) {
		//parseClaimsJws 메서드가 Base64호 디코딩 및 파싱
		//헤더와 페이로드를 setSigningKey로 넘어온 시크릿을 이용해 서명한 후 token의 서명과 비교
		//위조되지 않았다면 페이로드(Claims)를 리턴, 위조라면 예외를 날림
		//그 중 userId가 필요하므로 getBody를 부른다.
		log.info(token);
		Claims claims = Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
		
		return claims.getSubject();
	}
	
}
